# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

type User @model {
  id: ID!
  customId: String
  name: String
  
  email: String
  @index(
      name: "byEmail"
      queryField: "getUserByEmail"
      sortKeyFields: ["id"]
    )
  password: String,
  image: String
  provider: String
  id_token: String
  access_token: String
  postLikes: [String]
  commentLikes: [String]
  blogger: Boolean
  blog: Blog @hasOne
}

type Blog @model {
  id: ID!
  name: String!
  logo: String
  userId: ID!
  @index(
      name: "byUser"
      queryField: "getBlogByUser"
      sortKeyFields: ["id"]
    )
  user: User @belongsTo(fields: ["userId"])
  about: About @hasOne
  posts: [Post] @hasMany(indexName: "byblog", fields: ["id"])
  audios: [Audio] @hasMany(indexName: "byblog", fields: ["id"])
  comments: [Comment] @hasMany(indexName: "byblog", fields: ["id"])
}

type About @model {
  id: ID!
  blogId: ID!
  @index(
      name: "byblog"
      queryField: "getAboutByBlog"
      sortKeyFields: ["id"]
    )
  blog: Blog @belongsTo(fields: ["blogId"])
  title: String
  logo: String
  content: String
  email: String
  linkedIn: String
  instagram: String
  twitter: String
}

type Post @model {
  id: ID!
  blogId: ID!
  @index(
      name: "byblog"
      queryField: "fetchPostsByBlog"
      sortKeyFields: ["id"]
    )
  blog: Blog @belongsTo(fields: ["blogId"])
  category: String
  title: String
  description: String
  captionText: String
  captionImage: String
  likes: Int
  views: Int
  status: Boolean
  publishedAt: String
  expireAt: Int
  comments: [Comment] @hasMany(indexName: "bypost", fields: ["id"])
  audio: Audio @hasOne
}

type Comment @model {
  id: ID!
  blogId: ID!
  @index(
      name: "byblog"
      queryField: "fetchCommentsByBlog"
      sortKeyFields: ["id"]
    )
  blog: Blog @belongsTo(fields: ["blogId"])
  postId: ID!
  @index(
      name: "bypost"
      queryField: "fetchCommentsByPost"
      sortKeyFields: ["id"]
    )
  post: Post @belongsTo(fields: ["postId"])
  content: String
  subComment: Boolean
  parentComment: String
  likes: Int
  
}

type Audio @model {
  id: ID!
  blogId: ID!
  @index(
      name: "byblog"
      queryField: "fetchAudiosByBlog"
      sortKeyFields: ["id"]
    )
  blog: Blog @belongsTo(fields: ["blogId"])
  postId: ID!
  @index(
      name: "bypost"
      queryField: "getAudioByPost"
      sortKeyFields: ["id"]
    )
  post: Post @belongsTo(fields: ["postId"])
  duration: String
  filePath: String
   

}
